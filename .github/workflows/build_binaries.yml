name: Build Binaries

on:
  push:
    tags: 
      - v**

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    # - name: Download all artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     path: artifacts

    - name: Determine if prerelease
      id: prerelease_check
      run: |
        if [[ ${{ github.ref_name }} =~ -rc[0-9]+$ ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release and Upload Firmware
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        prerelease: ${{ steps.prerelease_check.outputs.is_prerelease }}
        # files: $(ls artifacts)
        # files: ${{ steps.zip_artifacts.outputs.archive_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: release
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        target: [DIY3, DIY4, DIY5]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: "recursive"

    - name: Build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.3.2
        target: esp32
        path: "./code/transducer-firmware/"
        command: idf.py -DTRANSDUCER=${{ matrix.target }} build

    - name: Create zip file of firmware artifacts
      id: zip_artifacts
      env:
        ARTIFACTS_FOLDER: ${{ matrix.target }}_${{ github.ref_name }}
      run: |
        mkdir -p ${{ env.ARTIFACTS_FOLDER }}
        cp ./code/transducer-firmware/build/bootloader/bootloader.bin ${{ env.ARTIFACTS_FOLDER }}/
        cp ./code/transducer-firmware/build/partition_table/partition-table.bin ${{ env.ARTIFACTS_FOLDER }}/
        cp ./code/transducer-firmware/build/transducer-firmware.bin ${{ env.ARTIFACTS_FOLDER }}/
        cd ${{ env.ARTIFACTS_FOLDER }}
        zip ${{ env.ARTIFACTS_FOLDER }}.zip *.bin
        echo "archive_path=$(pwd)/${{ env.ARTIFACTS_FOLDER }}.zip" >> $GITHUB_OUTPUT
        cd ..

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run:
        gh release upload ${{ github.ref }} ${{ steps.zip_artifacts.outputs.archive_path }}